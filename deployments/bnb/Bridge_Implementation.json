{
  "address": "0x3Bb86178942fd2E6c02f150601b885c3344Cc64e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum Bridge.BridgeType",
          "name": "_bridgeType",
          "type": "uint8"
        }
      ],
      "name": "BridgeContractNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destinationChainId",
          "type": "uint32"
        }
      ],
      "name": "DestinationChainNotSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_fee",
          "type": "uint32"
        }
      ],
      "name": "FeeOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBridgeType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_length2",
          "type": "uint256"
        }
      ],
      "name": "LengthsMustMatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Bridge.BridgeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "bridges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "connextChainIdToDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_fee",
          "type": "uint32"
        },
        {
          "internalType": "enum Bridge.BridgeType[]",
          "name": "_bridgeTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "_bridges",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_destinationChainId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "enum Bridge.BridgeType",
          "name": "_bridgeType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "sendThroughBridge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Bridge.BridgeType",
          "name": "_bridgeType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainId",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_connextDomain",
          "type": "uint32[]"
        }
      ],
      "name": "setDomains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_fee",
          "type": "uint32"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03907d332211b01247c0321bba4859c9f9e5dbbd951b29be0fd6e917f6784110",
  "receipt": {
    "to": null,
    "from": "0xFaDede2cFbfA7443497acacf76cFc4Fe59112DbB",
    "contractAddress": "0x3Bb86178942fd2E6c02f150601b885c3344Cc64e",
    "transactionIndex": 146,
    "gasUsed": "2542510",
    "logsBloom": "0x
    "blockHash": "0x1caf80f0b2ea19058c81b82f15e437dc0dcf00a5b71ecfd58bb280d4a3a6279e",
    "transactionHash": "0x03907d332211b01247c0321bba4859c9f9e5dbbd951b29be0fd6e917f6784110",
    "logs": [],
    "blockNumber": 33114187,
    "cumulativeGasUsed": "14232287",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "db6ebfe580f39d1fc3be9c4b67a50404",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum Bridge.BridgeType\",\"name\":\"_bridgeType\",\"type\":\"uint8\"}],\"name\":\"BridgeContractNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationChainId\",\"type\":\"uint32\"}],\"name\":\"DestinationChainNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_fee\",\"type\":\"uint32\"}],\"name\":\"FeeOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBridgeType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length2\",\"type\":\"uint256\"}],\"name\":\"LengthsMustMatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Bridge.BridgeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"bridges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"connextChainIdToDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_fee\",\"type\":\"uint32\"},{\"internalType\":\"enum Bridge.BridgeType[]\",\"name\":\"_bridgeTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_bridges\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_destinationChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"enum Bridge.BridgeType\",\"name\":\"_bridgeType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"sendThroughBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Bridge.BridgeType\",\"name\":\"_bridgeType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainId\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_connextDomain\",\"type\":\"uint32[]\"}],\"name\":\"setDomains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_fee\",\"type\":\"uint32\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"connext-interfaces/core/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\ninterface IConnext {\\n\\n  // ============ BRIDGE ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData,\\n    uint256 _relayerFee\\n  ) external returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  // ============ ROUTERS ==============\\n\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\\n\\n  // ============ TOKEN_FACET ==============\\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c2f287fe81216f7060acce25747374631b94ff9a87573e1c5d36df1a3a2fdf8\",\"license\":\"UNLICENSED\"},\"connext-interfaces/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\",\"keccak256\":\"0xb8581253c5ebe58445c37d344fafe6126d3f7a15784337b3571637cd0068de57\",\"license\":\"UNLICENSED\"},\"connext-interfaces/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xfa4e01760604863ea105e18380c243cd2250a7553d2b852f67ecb747f9916b6d\",\"license\":\"MIT OR Apache-2.0\"},\"openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"src/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {PausableUpgradeable} from \\\"openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol\\\";\\nimport {Ownable2StepUpgradeable} from \\\"openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\\\";\\nimport {Initializable} from \\\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport {SafeERC20Upgradeable} from\\n    \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from\\n    \\\"openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IConnext} from \\\"connext-interfaces/core/IConnext.sol\\\";\\n\\ncontract Bridge is Initializable, Ownable2StepUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\\n    error InvalidBridgeType();\\n    error BridgeContractNotSet(BridgeType _bridgeType);\\n    error DestinationChainNotSupported(uint32 _destinationChainId);\\n    error FeeOutOfBounds(uint32 _fee);\\n    error LengthsMustMatch(uint256 _length1, uint256 _length2);\\n\\n    uint32 public fee;\\n\\n    enum BridgeType {Connext}\\n\\n    mapping(BridgeType => address) public bridges;\\n\\n    mapping(uint32 => uint32) public connextChainIdToDomain;\\n\\n    function initialize(\\n        uint32 _fee, // BPS, i.e. 40 = 0.4%\\n        BridgeType[] calldata _bridgeTypes,\\n        address[] calldata _bridges\\n    ) public initializer {\\n        __Pausable_init();\\n        __Ownable2Step_init();\\n        __ReentrancyGuard_init();\\n        if (_fee > 10000) revert FeeOutOfBounds(_fee);\\n        fee = _fee;\\n        if (_bridgeTypes.length != _bridges.length) revert LengthsMustMatch(_bridgeTypes.length, _bridges.length);\\n        for (uint256 i = 0; i < _bridgeTypes.length; i++) {\\n            bridges[_bridgeTypes[i]] = _bridges[i];\\n        }\\n\\n        uint32[] memory chains = new uint32[](6);\\n        chains[0] = 1;\\n        chains[1] = 10;\\n        chains[2] = 56;\\n        chains[3] = 100;\\n        chains[4] = 137;\\n        chains[5] = 42161;\\n\\n        uint32[] memory domains = new uint32[](6);\\n        domains[0] = 6648936;\\n        domains[1] = 1869640809;\\n        domains[2] = 6450786;\\n        domains[3] = 6778479;\\n        domains[4] = 1886350457;\\n        domains[5] = 1634886255;\\n\\n        setDomains(chains, domains);\\n    }\\n\\n    // ADMIN FUNCTIONS\\n    function setFee(uint32 _fee) external onlyOwner {\\n        if (_fee < 0 || _fee > 10000) revert FeeOutOfBounds(_fee);\\n        fee = _fee;\\n    }\\n\\n    function setBridge(BridgeType _bridgeType, address _bridge) external onlyOwner {\\n        bridges[_bridgeType] = _bridge;\\n    }\\n\\n    function setDomains(uint32[] memory _chainId, uint32[] memory _connextDomain) public onlyOwner {\\n        if (_chainId.length != _connextDomain.length) revert LengthsMustMatch(_chainId.length, _connextDomain.length);\\n        for (uint256 i = 0; i < _chainId.length; i++) {\\n            connextChainIdToDomain[_chainId[i]] = _connextDomain[i];\\n        }\\n    }\\n\\n    function withdraw(address _token, address _recipient, uint256 _amount) external nonReentrant onlyOwner {\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_token), _recipient, _amount);\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n    function sendThroughBridge(\\n        address _token,\\n        address _recipient,\\n        uint32 _destinationChainId,\\n        uint256 _amount,\\n        bytes calldata _data,\\n        BridgeType _bridgeType,\\n        bytes calldata _extraData\\n    ) external payable whenNotPaused {\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(_token), msg.sender, address(this), _amount);\\n        uint256 _amountAfterFee = _amount - ((_amount * fee) / (10000));\\n        // example: 100 * 40 * 1000 / (10000 * 1000) = .4\\n\\n        if (_bridgeType == BridgeType.Connext) {\\n            _sendThroughConnext(_token, _recipient, _destinationChainId, _amountAfterFee, _data, _extraData);\\n        } else {\\n            revert InvalidBridgeType();\\n        }\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n    function _sendThroughConnext(\\n        address _token,\\n        address _recipient,\\n        uint32 _destinationChainId,\\n        uint256 _amount,\\n        bytes calldata _data,\\n        bytes calldata _extraData\\n    ) internal {\\n        if (bridges[BridgeType.Connext] == address(0)) {\\n            revert BridgeContractNotSet(BridgeType.Connext);\\n        }\\n        if (connextChainIdToDomain[_destinationChainId] == 0) {\\n            revert DestinationChainNotSupported(_destinationChainId);\\n        }\\n        SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_token), bridges[BridgeType.Connext], _amount);\\n        (address _delegate, uint256 _slippage) = abi.decode(_extraData, (address, uint256));\\n        IConnext(bridges[BridgeType.Connext]).xcall{value: msg.value}(\\n            connextChainIdToDomain[_destinationChainId], _recipient, _token, _delegate, _amount, _slippage, _data\\n        );\\n    }\\n\\n    // ============ Upgrade Gap ============\\n    uint256[49] private __GAP; // gap for upgrade safety\\n}\\n\",\"keccak256\":\"0x53204ffc48cf7272a3d26cd6b02b945f995e9d11c0637250366fa18f16d6f0da\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612d3e806100206000396000f3fe6080604052600436106100e85760003560e01c8063750269fd1161008a578063dc4efdd011610059578063dc4efdd014610297578063ddca3f43146102d4578063e30c3978146102ff578063f2fde38b1461032a576100e8565b8063750269fd1461021057806379ba50971461022c5780638da5cb5b14610243578063d9caed121461026e576100e8565b80635c975abb116100c65780635c975abb1461016857806365d67c3314610193578063708669f9146101d0578063715018a6146101f9576100e8565b80630da85f38146100ed5780631ab971ab146101165780631cc2db331461013f575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190611b7f565b610353565b005b34801561012257600080fd5b5061013d60048036038101906101389190611c14565b610944565b005b34801561014b57600080fd5b5061016660048036038101906101619190611cc4565b6109ce565b005b34801561017457600080fd5b5061017d610a50565b60405161018a9190611d1f565b60405180910390f35b34801561019f57600080fd5b506101ba60048036038101906101b59190611d3a565b610a67565b6040516101c79190611d76565b60405180910390f35b3480156101dc57600080fd5b506101f760048036038101906101f29190611ee0565b610a9a565b005b34801561020557600080fd5b5061020e610b82565b005b61022a60048036038101906102259190611fe4565b610b96565b005b34801561023857600080fd5b50610241610c68565b005b34801561024f57600080fd5b50610258610cf5565b6040516102659190611d76565b60405180910390f35b34801561027a57600080fd5b50610295600480360381019061029091906120c6565b610d1f565b005b3480156102a357600080fd5b506102be60048036038101906102b99190611c14565b610d47565b6040516102cb9190612128565b60405180910390f35b3480156102e057600080fd5b506102e9610d6a565b6040516102f69190612128565b60405180910390f35b34801561030b57600080fd5b50610314610d80565b6040516103219190611d76565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c9190612143565b610daa565b005b60008060019054906101000a900460ff161590508080156103845750600160008054906101000a900460ff1660ff16105b806103b1575061039330610e57565b1580156103b05750600160008054906101000a900460ff1660ff16145b5b6103f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e7906121f3565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561042d576001600060016101000a81548160ff0219169083151502179055505b610435610e7a565b61043d610ed3565b610445610f2c565b6127108663ffffffff16111561049257856040517ff5a6c8090000000000000000000000000000000000000000000000000000000081526004016104899190612128565b60405180910390fd5b8560fb60006101000a81548163ffffffff021916908363ffffffff1602179055508282905085859050146105055784849050838390506040517f1b8a7b260000000000000000000000000000000000000000000000000000000081526004016104fc929190612222565b60405180910390fd5b60005b858590508110156105ea578383828181106105265761052561224b565b5b905060200201602081019061053b9190612143565b60fc60008888858181106105525761055161224b565b5b90506020020160208101906105679190611d3a565b60008111156105795761057861227a565b5b600081111561058b5761058a61227a565b5b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806105e2906122d8565b915050610508565b506000600667ffffffffffffffff81111561060857610607611da2565b5b6040519080825280602002602001820160405280156106365781602001602082028036833780820191505090505b50905060018160008151811061064f5761064e61224b565b5b602002602001019063ffffffff16908163ffffffff1681525050600a8160018151811061067f5761067e61224b565b5b602002602001019063ffffffff16908163ffffffff16815250506038816002815181106106af576106ae61224b565b5b602002602001019063ffffffff16908163ffffffff16815250506064816003815181106106df576106de61224b565b5b602002602001019063ffffffff16908163ffffffff168152505060898160048151811061070f5761070e61224b565b5b602002602001019063ffffffff16908163ffffffff168152505061a4b1816005815181106107405761073f61224b565b5b602002602001019063ffffffff16908163ffffffff16815250506000600667ffffffffffffffff81111561077757610776611da2565b5b6040519080825280602002602001820160405280156107a55781602001602082028036833780820191505090505b50905062657468816000815181106107c0576107bf61224b565b5b602002602001019063ffffffff16908163ffffffff1681525050636f707469816001815181106107f3576107f261224b565b5b602002602001019063ffffffff16908163ffffffff168152505062626e62816002815181106108255761082461224b565b5b602002602001019063ffffffff16908163ffffffff168152505062676e6f816003815181106108575761085661224b565b5b602002602001019063ffffffff16908163ffffffff168152505063706f6c798160048151811061088a5761088961224b565b5b602002602001019063ffffffff16908163ffffffff1681525050636172626f816005815181106108bd576108bc61224b565b5b602002602001019063ffffffff16908163ffffffff16815250506108e18282610a9a565b5050801561093c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109339190612372565b60405180910390a15b505050505050565b61094c610f85565b60008163ffffffff16108061096857506127108163ffffffff16115b156109aa57806040517ff5a6c8090000000000000000000000000000000000000000000000000000000081526004016109a19190612128565b60405180910390fd5b8060fb60006101000a81548163ffffffff021916908363ffffffff16021790555050565b6109d6610f85565b8060fc60008460008111156109ee576109ed61227a565b5b6000811115610a00576109ff61227a565b5b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000609760009054906101000a900460ff16905090565b60fc6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610aa2610f85565b8051825114610aec57815181516040517f1b8a7b26000000000000000000000000000000000000000000000000000000008152600401610ae3929190612222565b60405180910390fd5b60005b8251811015610b7d57818181518110610b0b57610b0a61224b565b5b602002602001015160fd6000858481518110610b2a57610b2961224b565b5b602002602001015163ffffffff1663ffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508080610b75906122d8565b915050610aef565b505050565b610b8a610f85565b610b946000611003565b565b610b9e611034565b610baa8933308961107e565b600061271060fb60009054906101000a900463ffffffff1663ffffffff1688610bd3919061238d565b610bdd91906123fe565b87610be8919061242f565b9050600080811115610bfd57610bfc61227a565b5b846000811115610c1057610c0f61227a565b5b03610c2a57610c258a8a8a848a8a8989611107565b610c5c565b6040517f511b184900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b6000610c726113e0565b90508073ffffffffffffffffffffffffffffffffffffffff16610c93610d80565b73ffffffffffffffffffffffffffffffffffffffff1614610ce9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce0906124d5565b60405180910390fd5b610cf281611003565b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d276113e8565b610d2f610f85565b610d3a838383611437565b610d426114bd565b505050565b60fd6020528060005260406000206000915054906101000a900463ffffffff1681565b60fb60009054906101000a900463ffffffff1681565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610db2610f85565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16610e12610cf5565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610ec9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec090612567565b60405180910390fd5b610ed16114c7565b565b600060019054906101000a900460ff16610f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1990612567565b60405180910390fd5b610f2a611533565b565b600060019054906101000a900460ff16610f7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7290612567565b60405180910390fd5b610f83611594565b565b610f8d6113e0565b73ffffffffffffffffffffffffffffffffffffffff16610fab610cf5565b73ffffffffffffffffffffffffffffffffffffffff1614611001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff8906125d3565b60405180910390fd5b565b606560006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055611031816115ed565b50565b61103c610a50565b1561107c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110739061263f565b60405180910390fd5b565b611101846323b872dd60e01b85858560405160240161109f9392919061265f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116b3565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff1660fc60008060008111156111365761113561227a565b5b60008111156111485761114761227a565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111d05760006040517f312aa5770000000000000000000000000000000000000000000000000000000081526004016111c791906126de565b60405180910390fd5b600060fd60008863ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff160361124a57856040517fdb030f3d0000000000000000000000000000000000000000000000000000000081526004016112419190612128565b60405180910390fd5b6112ac8860fc60008060008111156112655761126461227a565b5b60008111156112775761127661227a565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168761177b565b60008083838101906112be9190612737565b9150915060fc60008060008111156112d9576112d861227a565b5b60008111156112eb576112ea61227a565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638aac16ba3460fd60008c63ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900463ffffffff168c8e878d888e8e6040518a63ffffffff1660e01b81526004016113909897969594939291906127c4565b60206040518083038185885af11580156113ae573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113d39190612872565b5050505050505050505050565b600033905090565b600260c9540361142d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611424906128eb565b60405180910390fd5b600260c981905550565b6114b88363a9059cbb60e01b848460405160240161145692919061290b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116b3565b505050565b600160c981905550565b600060019054906101000a900460ff16611516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150d90612567565b60405180910390fd5b6000609760006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16611582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157990612567565b60405180910390fd5b61159261158d6113e0565b611003565b565b600060019054906101000a900460ff166115e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115da90612567565b60405180910390fd5b600160c981905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611715826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118ca9092919063ffffffff16565b90506000815114806117375750808060200190518101906117369190612960565b5b611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176d906129ff565b60405180910390fd5b505050565b6000811480611805575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016117c2929190612a1f565b602060405180830381865afa1580156117df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118039190612a5d565b145b611844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183b90612afc565b60405180910390fd5b6118c58363095ea7b360e01b848460405160240161186392919061290b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116b3565b505050565b60606118d984846000856118e2565b90509392505050565b606082471015611927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191e90612b8e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516119509190612c1f565b60006040518083038185875af1925050503d806000811461198d576040519150601f19603f3d011682016040523d82523d6000602084013e611992565b606091505b50915091506119a3878383876119af565b92505050949350505050565b60608315611a11576000835103611a09576119c985610e57565b611a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ff90612c82565b60405180910390fd5b5b829050611a1c565b611a1b8383611a24565b5b949350505050565b600082511115611a375781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6b9190612ce6565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b611aa181611a88565b8114611aac57600080fd5b50565b600081359050611abe81611a98565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611ae957611ae8611ac4565b5b8235905067ffffffffffffffff811115611b0657611b05611ac9565b5b602083019150836020820283011115611b2257611b21611ace565b5b9250929050565b60008083601f840112611b3f57611b3e611ac4565b5b8235905067ffffffffffffffff811115611b5c57611b5b611ac9565b5b602083019150836020820283011115611b7857611b77611ace565b5b9250929050565b600080600080600060608688031215611b9b57611b9a611a7e565b5b6000611ba988828901611aaf565b955050602086013567ffffffffffffffff811115611bca57611bc9611a83565b5b611bd688828901611ad3565b9450945050604086013567ffffffffffffffff811115611bf957611bf8611a83565b5b611c0588828901611b29565b92509250509295509295909350565b600060208284031215611c2a57611c29611a7e565b5b6000611c3884828501611aaf565b91505092915050565b60018110611c4e57600080fd5b50565b600081359050611c6081611c41565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c9182611c66565b9050919050565b611ca181611c86565b8114611cac57600080fd5b50565b600081359050611cbe81611c98565b92915050565b60008060408385031215611cdb57611cda611a7e565b5b6000611ce985828601611c51565b9250506020611cfa85828601611caf565b9150509250929050565b60008115159050919050565b611d1981611d04565b82525050565b6000602082019050611d346000830184611d10565b92915050565b600060208284031215611d5057611d4f611a7e565b5b6000611d5e84828501611c51565b91505092915050565b611d7081611c86565b82525050565b6000602082019050611d8b6000830184611d67565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611dda82611d91565b810181811067ffffffffffffffff82111715611df957611df8611da2565b5b80604052505050565b6000611e0c611a74565b9050611e188282611dd1565b919050565b600067ffffffffffffffff821115611e3857611e37611da2565b5b602082029050602081019050919050565b6000611e5c611e5784611e1d565b611e02565b90508083825260208201905060208402830185811115611e7f57611e7e611ace565b5b835b81811015611ea85780611e948882611aaf565b845260208401935050602081019050611e81565b5050509392505050565b600082601f830112611ec757611ec6611ac4565b5b8135611ed7848260208601611e49565b91505092915050565b60008060408385031215611ef757611ef6611a7e565b5b600083013567ffffffffffffffff811115611f1557611f14611a83565b5b611f2185828601611eb2565b925050602083013567ffffffffffffffff811115611f4257611f41611a83565b5b611f4e85828601611eb2565b9150509250929050565b6000819050919050565b611f6b81611f58565b8114611f7657600080fd5b50565b600081359050611f8881611f62565b92915050565b60008083601f840112611fa457611fa3611ac4565b5b8235905067ffffffffffffffff811115611fc157611fc0611ac9565b5b602083019150836001820283011115611fdd57611fdc611ace565b5b9250929050565b600080600080600080600080600060e08a8c03121561200657612005611a7e565b5b60006120148c828d01611caf565b99505060206120258c828d01611caf565b98505060406120368c828d01611aaf565b97505060606120478c828d01611f79565b96505060808a013567ffffffffffffffff81111561206857612067611a83565b5b6120748c828d01611f8e565b955095505060a06120878c828d01611c51565b93505060c08a013567ffffffffffffffff8111156120a8576120a7611a83565b5b6120b48c828d01611f8e565b92509250509295985092959850929598565b6000806000606084860312156120df576120de611a7e565b5b60006120ed86828701611caf565b93505060206120fe86828701611caf565b925050604061210f86828701611f79565b9150509250925092565b61212281611a88565b82525050565b600060208201905061213d6000830184612119565b92915050565b60006020828403121561215957612158611a7e565b5b600061216784828501611caf565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006121dd602e83612170565b91506121e882612181565b604082019050919050565b6000602082019050818103600083015261220c816121d0565b9050919050565b61221c81611f58565b82525050565b60006040820190506122376000830185612213565b6122446020830184612213565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122e382611f58565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612315576123146122a9565b5b600182019050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061235c61235761235284612320565b612337565b61232a565b9050919050565b61236c81612341565b82525050565b60006020820190506123876000830184612363565b92915050565b600061239882611f58565b91506123a383611f58565b92508282026123b181611f58565b915082820484148315176123c8576123c76122a9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061240982611f58565b915061241483611f58565b925082612424576124236123cf565b5b828204905092915050565b600061243a82611f58565b915061244583611f58565b925082820390508181111561245d5761245c6122a9565b5b92915050565b7f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060008201527f6e6577206f776e65720000000000000000000000000000000000000000000000602082015250565b60006124bf602983612170565b91506124ca82612463565b604082019050919050565b600060208201905081810360008301526124ee816124b2565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612551602b83612170565b915061255c826124f5565b604082019050919050565b6000602082019050818103600083015261258081612544565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006125bd602083612170565b91506125c882612587565b602082019050919050565b600060208201905081810360008301526125ec816125b0565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612629601083612170565b9150612634826125f3565b602082019050919050565b600060208201905081810360008301526126588161261c565b9050919050565b60006060820190506126746000830186611d67565b6126816020830185611d67565b61268e6040830184612213565b949350505050565b600181106126a7576126a661227a565b5b50565b60008190506126b882612696565b919050565b60006126c8826126aa565b9050919050565b6126d8816126bd565b82525050565b60006020820190506126f360008301846126cf565b92915050565b600061270482611c66565b9050919050565b612714816126f9565b811461271f57600080fd5b50565b6000813590506127318161270b565b92915050565b6000806040838503121561274e5761274d611a7e565b5b600061275c85828601612722565b925050602061276d85828601611f79565b9150509250929050565b600082825260208201905092915050565b82818337600083830152505050565b60006127a38385612777565b93506127b0838584612788565b6127b983611d91565b840190509392505050565b600060e0820190506127d9600083018b612119565b6127e6602083018a611d67565b6127f36040830189611d67565b6128006060830188611d67565b61280d6080830187612213565b61281a60a0830186612213565b81810360c083015261282d818486612797565b90509998505050505050505050565b6000819050919050565b61284f8161283c565b811461285a57600080fd5b50565b60008151905061286c81612846565b92915050565b60006020828403121561288857612887611a7e565b5b60006128968482850161285d565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006128d5601f83612170565b91506128e08261289f565b602082019050919050565b60006020820190508181036000830152612904816128c8565b9050919050565b60006040820190506129206000830185611d67565b61292d6020830184612213565b9392505050565b61293d81611d04565b811461294857600080fd5b50565b60008151905061295a81612934565b92915050565b60006020828403121561297657612975611a7e565b5b60006129848482850161294b565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006129e9602a83612170565b91506129f48261298d565b604082019050919050565b60006020820190508181036000830152612a18816129dc565b9050919050565b6000604082019050612a346000830185611d67565b612a416020830184611d67565b9392505050565b600081519050612a5781611f62565b92915050565b600060208284031215612a7357612a72611a7e565b5b6000612a8184828501612a48565b91505092915050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000612ae6603683612170565b9150612af182612a8a565b604082019050919050565b60006020820190508181036000830152612b1581612ad9565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612b78602683612170565b9150612b8382612b1c565b604082019050919050565b60006020820190508181036000830152612ba781612b6b565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612be2578082015181840152602081019050612bc7565b60008484015250505050565b6000612bf982612bae565b612c038185612bb9565b9350612c13818560208601612bc4565b80840191505092915050565b6000612c2b8284612bee565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c6c601d83612170565b9150612c7782612c36565b602082019050919050565b60006020820190508181036000830152612c9b81612c5f565b9050919050565b600081519050919050565b6000612cb882612ca2565b612cc28185612170565b9350612cd2818560208601612bc4565b612cdb81611d91565b840191505092915050565b60006020820190508181036000830152612d008184612cad565b90509291505056fea2646970667358221220e731a081829d854dceb46e29bf6f30108a5e79412b8607a678596835eb7a87bf64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063750269fd1161008a578063dc4efdd011610059578063dc4efdd014610297578063ddca3f43146102d4578063e30c3978146102ff578063f2fde38b1461032a576100e8565b8063750269fd1461021057806379ba50971461022c5780638da5cb5b14610243578063d9caed121461026e576100e8565b80635c975abb116100c65780635c975abb1461016857806365d67c3314610193578063708669f9146101d0578063715018a6146101f9576100e8565b80630da85f38146100ed5780631ab971ab146101165780631cc2db331461013f575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190611b7f565b610353565b005b34801561012257600080fd5b5061013d60048036038101906101389190611c14565b610944565b005b34801561014b57600080fd5b5061016660048036038101906101619190611cc4565b6109ce565b005b34801561017457600080fd5b5061017d610a50565b60405161018a9190611d1f565b60405180910390f35b34801561019f57600080fd5b506101ba60048036038101906101b59190611d3a565b610a67565b6040516101c79190611d76565b60405180910390f35b3480156101dc57600080fd5b506101f760048036038101906101f29190611ee0565b610a9a565b005b34801561020557600080fd5b5061020e610b82565b005b61022a60048036038101906102259190611fe4565b610b96565b005b34801561023857600080fd5b50610241610c68565b005b34801561024f57600080fd5b50610258610cf5565b6040516102659190611d76565b60405180910390f35b34801561027a57600080fd5b50610295600480360381019061029091906120c6565b610d1f565b005b3480156102a357600080fd5b506102be60048036038101906102b99190611c14565b610d47565b6040516102cb9190612128565b60405180910390f35b3480156102e057600080fd5b506102e9610d6a565b6040516102f69190612128565b60405180910390f35b34801561030b57600080fd5b50610314610d80565b6040516103219190611d76565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c9190612143565b610daa565b005b60008060019054906101000a900460ff161590508080156103845750600160008054906101000a900460ff1660ff16105b806103b1575061039330610e57565b1580156103b05750600160008054906101000a900460ff1660ff16145b5b6103f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e7906121f3565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561042d576001600060016101000a81548160ff0219169083151502179055505b610435610e7a565b61043d610ed3565b610445610f2c565b6127108663ffffffff16111561049257856040517ff5a6c8090000000000000000000000000000000000000000000000000000000081526004016104899190612128565b60405180910390fd5b8560fb60006101000a81548163ffffffff021916908363ffffffff1602179055508282905085859050146105055784849050838390506040517f1b8a7b260000000000000000000000000000000000000000000000000000000081526004016104fc929190612222565b60405180910390fd5b60005b858590508110156105ea578383828181106105265761052561224b565b5b905060200201602081019061053b9190612143565b60fc60008888858181106105525761055161224b565b5b90506020020160208101906105679190611d3a565b60008111156105795761057861227a565b5b600081111561058b5761058a61227a565b5b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806105e2906122d8565b915050610508565b506000600667ffffffffffffffff81111561060857610607611da2565b5b6040519080825280602002602001820160405280156106365781602001602082028036833780820191505090505b50905060018160008151811061064f5761064e61224b565b5b602002602001019063ffffffff16908163ffffffff1681525050600a8160018151811061067f5761067e61224b565b5b602002602001019063ffffffff16908163ffffffff16815250506038816002815181106106af576106ae61224b565b5b602002602001019063ffffffff16908163ffffffff16815250506064816003815181106106df576106de61224b565b5b602002602001019063ffffffff16908163ffffffff168152505060898160048151811061070f5761070e61224b565b5b602002602001019063ffffffff16908163ffffffff168152505061a4b1816005815181106107405761073f61224b565b5b602002602001019063ffffffff16908163ffffffff16815250506000600667ffffffffffffffff81111561077757610776611da2565b5b6040519080825280602002602001820160405280156107a55781602001602082028036833780820191505090505b50905062657468816000815181106107c0576107bf61224b565b5b602002602001019063ffffffff16908163ffffffff1681525050636f707469816001815181106107f3576107f261224b565b5b602002602001019063ffffffff16908163ffffffff168152505062626e62816002815181106108255761082461224b565b5b602002602001019063ffffffff16908163ffffffff168152505062676e6f816003815181106108575761085661224b565b5b602002602001019063ffffffff16908163ffffffff168152505063706f6c798160048151811061088a5761088961224b565b5b602002602001019063ffffffff16908163ffffffff1681525050636172626f816005815181106108bd576108bc61224b565b5b602002602001019063ffffffff16908163ffffffff16815250506108e18282610a9a565b5050801561093c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109339190612372565b60405180910390a15b505050505050565b61094c610f85565b60008163ffffffff16108061096857506127108163ffffffff16115b156109aa57806040517ff5a6c8090000000000000000000000000000000000000000000000000000000081526004016109a19190612128565b60405180910390fd5b8060fb60006101000a81548163ffffffff021916908363ffffffff16021790555050565b6109d6610f85565b8060fc60008460008111156109ee576109ed61227a565b5b6000811115610a00576109ff61227a565b5b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000609760009054906101000a900460ff16905090565b60fc6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610aa2610f85565b8051825114610aec57815181516040517f1b8a7b26000000000000000000000000000000000000000000000000000000008152600401610ae3929190612222565b60405180910390fd5b60005b8251811015610b7d57818181518110610b0b57610b0a61224b565b5b602002602001015160fd6000858481518110610b2a57610b2961224b565b5b602002602001015163ffffffff1663ffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055508080610b75906122d8565b915050610aef565b505050565b610b8a610f85565b610b946000611003565b565b610b9e611034565b610baa8933308961107e565b600061271060fb60009054906101000a900463ffffffff1663ffffffff1688610bd3919061238d565b610bdd91906123fe565b87610be8919061242f565b9050600080811115610bfd57610bfc61227a565b5b846000811115610c1057610c0f61227a565b5b03610c2a57610c258a8a8a848a8a8989611107565b610c5c565b6040517f511b184900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b6000610c726113e0565b90508073ffffffffffffffffffffffffffffffffffffffff16610c93610d80565b73ffffffffffffffffffffffffffffffffffffffff1614610ce9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce0906124d5565b60405180910390fd5b610cf281611003565b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d276113e8565b610d2f610f85565b610d3a838383611437565b610d426114bd565b505050565b60fd6020528060005260406000206000915054906101000a900463ffffffff1681565b60fb60009054906101000a900463ffffffff1681565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610db2610f85565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16610e12610cf5565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610ec9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec090612567565b60405180910390fd5b610ed16114c7565b565b600060019054906101000a900460ff16610f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1990612567565b60405180910390fd5b610f2a611533565b565b600060019054906101000a900460ff16610f7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7290612567565b60405180910390fd5b610f83611594565b565b610f8d6113e0565b73ffffffffffffffffffffffffffffffffffffffff16610fab610cf5565b73ffffffffffffffffffffffffffffffffffffffff1614611001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff8906125d3565b60405180910390fd5b565b606560006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055611031816115ed565b50565b61103c610a50565b1561107c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110739061263f565b60405180910390fd5b565b611101846323b872dd60e01b85858560405160240161109f9392919061265f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116b3565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff1660fc60008060008111156111365761113561227a565b5b60008111156111485761114761227a565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111d05760006040517f312aa5770000000000000000000000000000000000000000000000000000000081526004016111c791906126de565b60405180910390fd5b600060fd60008863ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff160361124a57856040517fdb030f3d0000000000000000000000000000000000000000000000000000000081526004016112419190612128565b60405180910390fd5b6112ac8860fc60008060008111156112655761126461227a565b5b60008111156112775761127661227a565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168761177b565b60008083838101906112be9190612737565b9150915060fc60008060008111156112d9576112d861227a565b5b60008111156112eb576112ea61227a565b5b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638aac16ba3460fd60008c63ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900463ffffffff168c8e878d888e8e6040518a63ffffffff1660e01b81526004016113909897969594939291906127c4565b60206040518083038185885af11580156113ae573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113d39190612872565b5050505050505050505050565b600033905090565b600260c9540361142d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611424906128eb565b60405180910390fd5b600260c981905550565b6114b88363a9059cbb60e01b848460405160240161145692919061290b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116b3565b505050565b600160c981905550565b600060019054906101000a900460ff16611516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150d90612567565b60405180910390fd5b6000609760006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16611582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157990612567565b60405180910390fd5b61159261158d6113e0565b611003565b565b600060019054906101000a900460ff166115e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115da90612567565b60405180910390fd5b600160c981905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611715826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118ca9092919063ffffffff16565b90506000815114806117375750808060200190518101906117369190612960565b5b611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176d906129ff565b60405180910390fd5b505050565b6000811480611805575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016117c2929190612a1f565b602060405180830381865afa1580156117df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118039190612a5d565b145b611844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183b90612afc565b60405180910390fd5b6118c58363095ea7b360e01b848460405160240161186392919061290b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116b3565b505050565b60606118d984846000856118e2565b90509392505050565b606082471015611927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191e90612b8e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516119509190612c1f565b60006040518083038185875af1925050503d806000811461198d576040519150601f19603f3d011682016040523d82523d6000602084013e611992565b606091505b50915091506119a3878383876119af565b92505050949350505050565b60608315611a11576000835103611a09576119c985610e57565b611a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ff90612c82565b60405180910390fd5b5b829050611a1c565b611a1b8383611a24565b5b949350505050565b600082511115611a375781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6b9190612ce6565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b611aa181611a88565b8114611aac57600080fd5b50565b600081359050611abe81611a98565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611ae957611ae8611ac4565b5b8235905067ffffffffffffffff811115611b0657611b05611ac9565b5b602083019150836020820283011115611b2257611b21611ace565b5b9250929050565b60008083601f840112611b3f57611b3e611ac4565b5b8235905067ffffffffffffffff811115611b5c57611b5b611ac9565b5b602083019150836020820283011115611b7857611b77611ace565b5b9250929050565b600080600080600060608688031215611b9b57611b9a611a7e565b5b6000611ba988828901611aaf565b955050602086013567ffffffffffffffff811115611bca57611bc9611a83565b5b611bd688828901611ad3565b9450945050604086013567ffffffffffffffff811115611bf957611bf8611a83565b5b611c0588828901611b29565b92509250509295509295909350565b600060208284031215611c2a57611c29611a7e565b5b6000611c3884828501611aaf565b91505092915050565b60018110611c4e57600080fd5b50565b600081359050611c6081611c41565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c9182611c66565b9050919050565b611ca181611c86565b8114611cac57600080fd5b50565b600081359050611cbe81611c98565b92915050565b60008060408385031215611cdb57611cda611a7e565b5b6000611ce985828601611c51565b9250506020611cfa85828601611caf565b9150509250929050565b60008115159050919050565b611d1981611d04565b82525050565b6000602082019050611d346000830184611d10565b92915050565b600060208284031215611d5057611d4f611a7e565b5b6000611d5e84828501611c51565b91505092915050565b611d7081611c86565b82525050565b6000602082019050611d8b6000830184611d67565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611dda82611d91565b810181811067ffffffffffffffff82111715611df957611df8611da2565b5b80604052505050565b6000611e0c611a74565b9050611e188282611dd1565b919050565b600067ffffffffffffffff821115611e3857611e37611da2565b5b602082029050602081019050919050565b6000611e5c611e5784611e1d565b611e02565b90508083825260208201905060208402830185811115611e7f57611e7e611ace565b5b835b81811015611ea85780611e948882611aaf565b845260208401935050602081019050611e81565b5050509392505050565b600082601f830112611ec757611ec6611ac4565b5b8135611ed7848260208601611e49565b91505092915050565b60008060408385031215611ef757611ef6611a7e565b5b600083013567ffffffffffffffff811115611f1557611f14611a83565b5b611f2185828601611eb2565b925050602083013567ffffffffffffffff811115611f4257611f41611a83565b5b611f4e85828601611eb2565b9150509250929050565b6000819050919050565b611f6b81611f58565b8114611f7657600080fd5b50565b600081359050611f8881611f62565b92915050565b60008083601f840112611fa457611fa3611ac4565b5b8235905067ffffffffffffffff811115611fc157611fc0611ac9565b5b602083019150836001820283011115611fdd57611fdc611ace565b5b9250929050565b600080600080600080600080600060e08a8c03121561200657612005611a7e565b5b60006120148c828d01611caf565b99505060206120258c828d01611caf565b98505060406120368c828d01611aaf565b97505060606120478c828d01611f79565b96505060808a013567ffffffffffffffff81111561206857612067611a83565b5b6120748c828d01611f8e565b955095505060a06120878c828d01611c51565b93505060c08a013567ffffffffffffffff8111156120a8576120a7611a83565b5b6120b48c828d01611f8e565b92509250509295985092959850929598565b6000806000606084860312156120df576120de611a7e565b5b60006120ed86828701611caf565b93505060206120fe86828701611caf565b925050604061210f86828701611f79565b9150509250925092565b61212281611a88565b82525050565b600060208201905061213d6000830184612119565b92915050565b60006020828403121561215957612158611a7e565b5b600061216784828501611caf565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006121dd602e83612170565b91506121e882612181565b604082019050919050565b6000602082019050818103600083015261220c816121d0565b9050919050565b61221c81611f58565b82525050565b60006040820190506122376000830185612213565b6122446020830184612213565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122e382611f58565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612315576123146122a9565b5b600182019050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061235c61235761235284612320565b612337565b61232a565b9050919050565b61236c81612341565b82525050565b60006020820190506123876000830184612363565b92915050565b600061239882611f58565b91506123a383611f58565b92508282026123b181611f58565b915082820484148315176123c8576123c76122a9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061240982611f58565b915061241483611f58565b925082612424576124236123cf565b5b828204905092915050565b600061243a82611f58565b915061244583611f58565b925082820390508181111561245d5761245c6122a9565b5b92915050565b7f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060008201527f6e6577206f776e65720000000000000000000000000000000000000000000000602082015250565b60006124bf602983612170565b91506124ca82612463565b604082019050919050565b600060208201905081810360008301526124ee816124b2565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612551602b83612170565b915061255c826124f5565b604082019050919050565b6000602082019050818103600083015261258081612544565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006125bd602083612170565b91506125c882612587565b602082019050919050565b600060208201905081810360008301526125ec816125b0565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612629601083612170565b9150612634826125f3565b602082019050919050565b600060208201905081810360008301526126588161261c565b9050919050565b60006060820190506126746000830186611d67565b6126816020830185611d67565b61268e6040830184612213565b949350505050565b600181106126a7576126a661227a565b5b50565b60008190506126b882612696565b919050565b60006126c8826126aa565b9050919050565b6126d8816126bd565b82525050565b60006020820190506126f360008301846126cf565b92915050565b600061270482611c66565b9050919050565b612714816126f9565b811461271f57600080fd5b50565b6000813590506127318161270b565b92915050565b6000806040838503121561274e5761274d611a7e565b5b600061275c85828601612722565b925050602061276d85828601611f79565b9150509250929050565b600082825260208201905092915050565b82818337600083830152505050565b60006127a38385612777565b93506127b0838584612788565b6127b983611d91565b840190509392505050565b600060e0820190506127d9600083018b612119565b6127e6602083018a611d67565b6127f36040830189611d67565b6128006060830188611d67565b61280d6080830187612213565b61281a60a0830186612213565b81810360c083015261282d818486612797565b90509998505050505050505050565b6000819050919050565b61284f8161283c565b811461285a57600080fd5b50565b60008151905061286c81612846565b92915050565b60006020828403121561288857612887611a7e565b5b60006128968482850161285d565b91505092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006128d5601f83612170565b91506128e08261289f565b602082019050919050565b60006020820190508181036000830152612904816128c8565b9050919050565b60006040820190506129206000830185611d67565b61292d6020830184612213565b9392505050565b61293d81611d04565b811461294857600080fd5b50565b60008151905061295a81612934565b92915050565b60006020828403121561297657612975611a7e565b5b60006129848482850161294b565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006129e9602a83612170565b91506129f48261298d565b604082019050919050565b60006020820190508181036000830152612a18816129dc565b9050919050565b6000604082019050612a346000830185611d67565b612a416020830184611d67565b9392505050565b600081519050612a5781611f62565b92915050565b600060208284031215612a7357612a72611a7e565b5b6000612a8184828501612a48565b91505092915050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000612ae6603683612170565b9150612af182612a8a565b604082019050919050565b60006020820190508181036000830152612b1581612ad9565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612b78602683612170565b9150612b8382612b1c565b604082019050919050565b60006020820190508181036000830152612ba781612b6b565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612be2578082015181840152602081019050612bc7565b60008484015250505050565b6000612bf982612bae565b612c038185612bb9565b9350612c13818560208601612bc4565b80840191505092915050565b6000612c2b8284612bee565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c6c601d83612170565b9150612c7782612c36565b602082019050919050565b60006020820190508181036000830152612c9b81612c5f565b9050919050565b600081519050919050565b6000612cb882612ca2565b612cc28185612170565b9350612cd2818560208601612bc4565b612cdb81611d91565b840191505092915050565b60006020820190508181036000830152612d008184612cad565b90509291505056fea2646970667358221220e731a081829d854dceb46e29bf6f30108a5e79412b8607a678596835eb7a87bf64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 585,
        "contract": "src/Bridge.sol:Bridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 588,
        "contract": "src/Bridge.sol:Bridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1819,
        "contract": "src/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 457,
        "contract": "src/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 577,
        "contract": "src/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 366,
        "contract": "src/Bridge.sol:Bridge",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 445,
        "contract": "src/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 768,
        "contract": "src/Bridge.sol:Bridge",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 873,
        "contract": "src/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 888,
        "contract": "src/Bridge.sol:Bridge",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 957,
        "contract": "src/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1867,
        "contract": "src/Bridge.sol:Bridge",
        "label": "fee",
        "offset": 0,
        "slot": "251",
        "type": "t_uint32"
      },
      {
        "astId": 1874,
        "contract": "src/Bridge.sol:Bridge",
        "label": "bridges",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_enum(BridgeType)1869,t_address)"
      },
      {
        "astId": 1878,
        "contract": "src/Bridge.sol:Bridge",
        "label": "connextChainIdToDomain",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 2325,
        "contract": "src/Bridge.sol:Bridge",
        "label": "__GAP",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(BridgeType)1869": {
        "encoding": "inplace",
        "label": "enum Bridge.BridgeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(BridgeType)1869,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(BridgeType)1869",
        "label": "mapping(enum Bridge.BridgeType => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}